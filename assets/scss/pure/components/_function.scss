// functions -------------------------
// color
// em
// am
// @mixins ----------------------
// replace
// media query

// functions -------------------------
// color
@function analogous($color, $degree) {
  @if lightness($color) >= 50% { @return darken($color, $degree); }
  @else { @return lighten($color, $degree); }
}
@function complementary($color) {
  @if lightness($color) >= 50% { @return #000; }
  @else { @return #fff; }
}

// em
// Convert pixels to ems
// eg. for a relational value of 12px write em(12) when the parent is 16px
// if the parent is another value say 24px write em(12, 24)
$em-base: 16px !default;
@function em($pxval, $base: $em-base) {
	@if not unitless($pxval) {
			$pxval: strip-units($pxval);
	}
	@if not unitless($base) {
			$base: strip-units($base);
	}
	@return ($pxval / $base) * 1em;
}

// am
@function am($module, $trait: false) {
  @if $trait == false  {
    @return '[am-' + $module + ']';
  } @else {
    @return '[am-' + $module + '~="' + $trait + '"]';
  }
}
@mixin am($module, $trait: null) {
  @if $trait != null {
    [am-#{$module}~="#{$trait}"]{
      @content;
    }
  }
  @else {
    [am-#{$module}]{
      @content;
    }
  }
}

// @mixins ----------------------
// replace
@mixin replace($old-context, $contexts...) {
  @each $context in $contexts {
    @at-root #{selector-replace(&, $old-context, $context)} {
      @content;  
    }
  }  
}
// media query
@mixin mq-min($min, $media: false){
  @if $media {
    @media #{$media} and (min-width: em($min)) {
      @content;
    }
  }
  @else {
    @media screen and (min-width: em($min)) {
      @content;
    }
  }
}
@mixin mq-max($max, $media: false){
  @if $media {
    @media #{$media} and (max-width: em($max)) {
      @content;
    }
  }
  @else {
    @media screen and (max-width: em($max)) {
      @content;
    }
  }
}
@mixin mq-mm($min, $max, $media: false){
  @if $media {
    @media #{$media} and (min-width: em($min)) and (max-width: em($max)) {
      @content;
    }
  }
  @else {
    @media screen and (min-width: em($min)) and (max-width: em($max)) {
      @content;
    }
  }
}

// @mixin clearfix {
//   &:after {
//     content:"";
//     display:table;
//     clear:both;
//   }
// }
// %clearfix {
//   @include clearfix;
// }