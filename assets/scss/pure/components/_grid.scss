// grids
//-----------------------
// basis
// grids
// block grid
// fixed columns

// basis
%row {
  letter-spacing: -0.33em; 
  @if $IE7 {*letter-spacing: normal; *word-spacing: -0.43em; }
}
%col {
  display: inline-block;
  @if $IE7 {*display: inline; zoom: 1; word-spacing: normal; }
  letter-spacing: normal;
  vertical-align: top;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  width: 100%;
}
%no-x-padding {
  padding-left: 0;
  padding-right: 0;
}

// grids
@mixin row(
  $row: false,
  $gutter: false,
  $common: true,
  $inside-row: false
){
  @if $common { @extend %row; }
  @if $row and $row != 100% {
    max-width: $row;
    margin-left: auto;
    margin-right: auto;
  }
  @if $gutter and $inside-row {
    margin-left: (-$gutter/2);
    margin-right: (-$gutter/2);
    @extend %no-x-padding;
  }
  @else if $gutter {
    padding-left: ($gutter/2);
    padding-right: ($gutter/2);
  }
}

@mixin col(
  $col, 
  $cols: $cols,
  $gutter: false, 
  $common: true,
  $pull: false,
  $push: false,
  $offset: false,
  $centered: false
){
  width: percentage(($col/$cols));
  @if $common { @at-root (without: media){ @extend %col; } }
  @if $gutter {
    padding-left: ($gutter/2);
    padding-right: ($gutter/2);
  }
  @if $pull {
    position: relative;
    left: percentage((-$pull/$cols));
  }
  @if $push {
    position: relative;
    left: percentage(($push/$cols));
  }
  @if $offset {
    margin-left: percentage(($offset/$cols));
  }
  @if $centered {
    display: block;
    margin-left: auto;
    margin-right: auto;
  }
}

@if $generate-grid {
  #{am(row)} { @include row($row, $gutter); }
  #{am(row, full)} { max-width: none; }
  #{am(row, no-gutter)} { 
    padding-left: 0;
    padding-right: 0;
    > #{am(col)} {
      @extend %no-x-padding;
    }
  }
  #{am(row)} {
    #{am(row)} {
      @include row(100%, $gutter, $common:false, $inside-row: true);
    }
  }
  #{am(col)} { @include col(12,12,$gutter); }
  @for $i from 1 through $cols {
    #{am(col, $i)} { @include col($i, $cols, $gutter: false, $common: false); }
  }
  $mq-width:(
    md: $md,
    lg: $lg,
    xl: $xl
  );
  @each $name, $value in $mq-width {
    @media screen and (min-width: $value){
      @for $i from 1 through $cols {
        #{am(col, #{$name}-#{$i})} { @include col($i, $cols, $gutter: false, $common: false); }
      }
    }
  }
}

// block grid
@mixin block(
  $block, 
  $gutter: false
){
  @at-root (without: media) { 
    @if $gutter { @include row(100%, $gutter, $inside-row:true); }
    @else { @include row(100%); }
    #{am(row)} & { @extend %no-x-padding; }
  }
  > li {
    @if $gutter {
      @include col(1, $block, $gutter);
      margin-bottom: $gutter;
    }
    @else {
      @include col(1, $block);
    }
    > :last-child { margin-bottom: 0 !important; }
  }
  img { width: 100%; }
}

@if $generate-grid-block {
  @for $i from 1 through $block {
    .block-#{$i} { @include block($i); }
    @media screen and (min-width: $sm) {
      .block-sm-#{$i} { @include block($i); }
    }
    @media screen and (min-width: $md) {
      .block-md-#{$i} { @include block($i); }
    }
    @media screen and (min-width: $lg) {
      .block-lg-#{$i} { @include block($i); }
    }
    @media screen and (min-width: $xl) {
      .block-xl-#{$i} { @include block($i); }
    }
  }
}

// fixed columns
@mixin fixed-col($direction, $aside, $gutter) {
  $total: ($aside + $gutter);
  @at-root (without: media) { @extend %clearfix; }
  @if $direction == right {
    padding-right: $total;
    > #{am(col-main)} {
      float: left;
      width: 100%;
    }
    > #{am(col-aside)} {
      float: right;
      width: $aside;
      margin-right: - $total;
    }
  }
  @else {
    padding-left: $total;
    > #{am(col-main)} {
      float: right;
      width: 100%;
    }
    > #{am(col-aside)} {
      float: left;
      width: $aside;
      margin-left: - $total;
    }
  }
}
@mixin fixed-col3($left, $right, $gutter) {
  $total-left: ($left + $gutter);
  $total-right: ($right + $gutter);
  @at-root (without: media) { @extend %clearfix; }
  padding-left: $total-left;
  padding-right: $total-right;
  > #{am(col-main)} { width: 100%; float: left; }
  > #{am(col-right)} {
    float: right;
    width: $right;
    margin-right: - $total-right;
  }
  > #{am(col-left)} {
    float: left;
    width: $left;
    margin-left: - $total-left;
  }
}